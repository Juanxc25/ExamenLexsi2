
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARGS ARRAY CLASS COLON COMMA CONSOLE DEF DIVIDE DOT ELSE EQUALS FOR ID IF LBRACE LEFT_BRACKET LPAREN MAIN MINUS NAMESPACE NUMBER OBJECT PLUS PRINT PRINTLN RBRACE RIGHT_BRACKET RPAREN SEMICOLON STATIC STRING_LITERAL STRING_TYPE SYSTEM TIMES UNIT USING VOID WHILE WRITELINE\n    program : programa_1\n    \n    programa_1 : USING SYSTEM SEMICOLON object_declaration  \n    \n    object_declaration : NAMESPACE ID LBRACE main_declaration RBRACE \n    \n    main_declaration : CLASS ID LBRACE args RBRACE \n    \n    args : STATIC VOID MAIN LPAREN STRING_TYPE LEFT_BRACKET RIGHT_BRACKET ARGS RPAREN LBRACE statements RBRACE \n    \n    statements : statement\n               | statements statement\n    \n    statement : expression SEMICOLON\n              | println_statement\n              | assignment\n    \n    println_statement : SYSTEM DOT CONSOLE DOT WRITELINE LPAREN STRING_LITERAL RPAREN SEMICOLON\n    \n    expression : term\n               | expression PLUS term\n               | expression MINUS term\n    \n    term : factor\n         | term TIMES factor\n         | term DIVIDE factor\n    \n    factor : NUMBER\n           | ID\n           | LPAREN expression RPAREN\n    \n    assignment : ID EQUALS expression\n    '
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,2,6,12,],[0,-1,-2,-3,]),'SYSTEM':([3,26,28,29,31,32,33,36,37,39,41,42,49,50,51,52,53,55,61,],[4,34,34,-6,-9,-10,-12,-15,-18,-19,-7,-8,-20,-13,-14,-16,-17,-21,-11,]),'SEMICOLON':([4,30,33,35,36,37,39,49,50,51,52,53,60,],[5,42,-12,-19,-15,-18,-19,-20,-13,-14,-16,-17,61,]),'NAMESPACE':([5,],[7,]),'ID':([7,11,26,27,28,29,31,32,33,36,37,39,41,42,43,44,45,46,48,49,50,51,52,53,55,61,],[8,13,35,39,35,-6,-9,-10,-12,-15,-18,-19,-7,-8,39,39,39,39,39,-20,-13,-14,-16,-17,-21,-11,]),'LBRACE':([8,13,25,],[9,14,26,]),'CLASS':([9,],[11,]),'RBRACE':([10,15,17,28,29,31,32,33,36,37,39,40,41,42,49,50,51,52,53,55,61,],[12,17,-4,40,-6,-9,-10,-12,-15,-18,-19,-5,-7,-8,-20,-13,-14,-16,-17,-21,-11,]),'STATIC':([14,],[16,]),'VOID':([16,],[18,]),'MAIN':([18,],[19,]),'LPAREN':([19,26,27,28,29,31,32,33,36,37,39,41,42,43,44,45,46,48,49,50,51,52,53,55,57,61,],[20,27,27,27,-6,-9,-10,-12,-15,-18,-19,-7,-8,27,27,27,27,27,-20,-13,-14,-16,-17,-21,58,-11,]),'STRING_TYPE':([20,],[21,]),'LEFT_BRACKET':([21,],[22,]),'RIGHT_BRACKET':([22,],[23,]),'ARGS':([23,],[24,]),'RPAREN':([24,33,36,37,38,39,49,50,51,52,53,59,],[25,-12,-15,-18,49,-19,-20,-13,-14,-16,-17,60,]),'NUMBER':([26,27,28,29,31,32,33,36,37,39,41,42,43,44,45,46,48,49,50,51,52,53,55,61,],[37,37,37,-6,-9,-10,-12,-15,-18,-19,-7,-8,37,37,37,37,37,-20,-13,-14,-16,-17,-21,-11,]),'PLUS':([30,33,35,36,37,38,39,49,50,51,52,53,55,],[43,-12,-19,-15,-18,43,-19,-20,-13,-14,-16,-17,43,]),'MINUS':([30,33,35,36,37,38,39,49,50,51,52,53,55,],[44,-12,-19,-15,-18,44,-19,-20,-13,-14,-16,-17,44,]),'TIMES':([33,35,36,37,39,49,50,51,52,53,],[45,-19,-15,-18,-19,-20,45,45,-16,-17,]),'DIVIDE':([33,35,36,37,39,49,50,51,52,53,],[46,-19,-15,-18,-19,-20,46,46,-16,-17,]),'DOT':([34,54,],[47,56,]),'EQUALS':([35,],[48,]),'CONSOLE':([47,],[54,]),'WRITELINE':([56,],[57,]),'STRING_LITERAL':([58,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programa_1':([0,],[2,]),'object_declaration':([5,],[6,]),'main_declaration':([9,],[10,]),'args':([14,],[15,]),'statements':([26,],[28,]),'statement':([26,28,],[29,41,]),'expression':([26,27,28,48,],[30,38,30,55,]),'println_statement':([26,28,],[31,31,]),'assignment':([26,28,],[32,32,]),'term':([26,27,28,43,44,48,],[33,33,33,50,51,33,]),'factor':([26,27,28,43,44,45,46,48,],[36,36,36,36,36,52,53,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> programa_1','program',1,'p_program','analizador_Sintactico.py',7),
  ('programa_1 -> USING SYSTEM SEMICOLON object_declaration','programa_1',4,'p_programa_1','analizador_Sintactico.py',14),
  ('object_declaration -> NAMESPACE ID LBRACE main_declaration RBRACE','object_declaration',5,'p_object_declaration','analizador_Sintactico.py',20),
  ('main_declaration -> CLASS ID LBRACE args RBRACE','main_declaration',5,'p_main_declaration','analizador_Sintactico.py',26),
  ('args -> STATIC VOID MAIN LPAREN STRING_TYPE LEFT_BRACKET RIGHT_BRACKET ARGS RPAREN LBRACE statements RBRACE','args',12,'p_args','analizador_Sintactico.py',33),
  ('statements -> statement','statements',1,'p_statements','analizador_Sintactico.py',45),
  ('statements -> statements statement','statements',2,'p_statements','analizador_Sintactico.py',46),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','analizador_Sintactico.py',53),
  ('statement -> println_statement','statement',1,'p_statement','analizador_Sintactico.py',54),
  ('statement -> assignment','statement',1,'p_statement','analizador_Sintactico.py',55),
  ('println_statement -> SYSTEM DOT CONSOLE DOT WRITELINE LPAREN STRING_LITERAL RPAREN SEMICOLON','println_statement',9,'p_println_statement','analizador_Sintactico.py',61),
  ('expression -> term','expression',1,'p_expression','analizador_Sintactico.py',67),
  ('expression -> expression PLUS term','expression',3,'p_expression','analizador_Sintactico.py',68),
  ('expression -> expression MINUS term','expression',3,'p_expression','analizador_Sintactico.py',69),
  ('term -> factor','term',1,'p_term','analizador_Sintactico.py',75),
  ('term -> term TIMES factor','term',3,'p_term','analizador_Sintactico.py',76),
  ('term -> term DIVIDE factor','term',3,'p_term','analizador_Sintactico.py',77),
  ('factor -> NUMBER','factor',1,'p_factor','analizador_Sintactico.py',83),
  ('factor -> ID','factor',1,'p_factor','analizador_Sintactico.py',84),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','analizador_Sintactico.py',85),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','analizador_Sintactico.py',94),
]
